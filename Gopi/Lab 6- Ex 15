// SPDX-License-Identifier: Unlicensed
pragma solidity 0.8.25;

contract DemoContract {

 address public owner;
 struct Receivers {
   string name;
   uint256 tokens;
 }
 mapping(address => Receivers) public users;

 modifier onlyOwner() {
   require(msg.sender == owner);
   _;
 }

 constructor() {
   owner = msg.sender;
   users[owner].tokens = 100;
 }

 function double(uint _value) public pure returns (uint) {
   return _value * 2;
 }

 function register(string memory _name) public {
   users[msg.sender].name = _name;
 }

 function giveToken(address _receiver, uint256 _amount) public onlyOwner {
   require(users[owner].tokens >= _amount, "Insufficient tokens");
   users[owner].tokens -= _amount;
   users[_receiver].tokens += _amount;
 }

 function purchaseToken() public payable {
   uint256 tokensToBuy = msg.value / 2 ether; // 1 token = 2 Ether
   require(users[owner].tokens >= tokensToBuy, "Owner has insufficient tokens");

   users[owner].tokens -= tokensToBuy;
   users[msg.sender].tokens += tokensToBuy;
 }

 function getEtherBalance() public view returns (uint256) {
   return address(this).balance;
 }
}
