/* 
  Sketch generated by the Arduino IoT Cloud Thing "Untitled"
  https://create.arduino.cc/cloud/things/28180939-3e0f-4069-b38e-123a4350b0a0 

  Arduino IoT Cloud Variables description

  The following variables are automatically generated and updated when changes are made to the Thing

  int pitch;
  int roll;
  bool k;

  Variables which are marked as READ/WRITE in the Cloud Thing will also have functions
  which are called when their values are changed from the Dashboard.
  These functions are generated with the Thing and added at the end of this sketch.
*/

#include "thingProperties.h"
#include "Wire.h"
#include <MPU6050_light.h>

MPU6050 mpu(Wire);
unsigned long timer = 0;

const int redPin = 5;   // Changed to standard GPIO pins
const int greenPin = 6; // Changed to standard GPIO pins
const int bluePin = 7;  // Changed to standard GPIO pins

void setup() {
  // Initialize serial and wait for port to open:
  Serial.begin(9600);
  // This delay gives the chance to wait for a Serial Monitor without blocking if none is found
  delay(1500); 

  // Defined in thingProperties.h
  initProperties();

  // Connect to Arduino IoT Cloud
  ArduinoCloud.begin(ArduinoIoTPreferredConnection);

  /*
     The following function allows you to obtain more information
     related to the state of network and IoT Cloud connection and errors
     the higher number the more granular information youâ€™ll get.
     The default is 0 (only errors).
     Maximum is 4
   */
  setDebugMessageLevel(2);
  ArduinoCloud.printDebugInfo();

  Wire.begin();
  
  pinMode(redPin, OUTPUT);
  pinMode(greenPin, OUTPUT);
  pinMode(bluePin, OUTPUT);
  
  byte status = mpu.begin();
  Serial.print(F("MPU6050 status: "));
  Serial.println(status);
  while(status != 0) { 
    Serial.println("Could not connect to MPU6050, retrying...");
    delay(1000);
    status = mpu.begin();
  }
  
  Serial.println(F("Calculating offsets, do not move MPU6050"));
  delay(1000);
  // mpu.upsideDownMounting = true; // uncomment this line if the MPU6050 is mounted upside-down
  mpu.calcOffsets(); // gyro and accelero
  Serial.println("Done!\n");
}

void loop() {
  ArduinoCloud.update(); // Ensure IoT Cloud is updated

  mpu.update();
  
  if((millis() - timer) > 4000) { // print data every 4000ms (4 seconds)
    float roll = mpu.getAngleX();
    float pitch = mpu.getAngleY();
    float yaw = mpu.getAngleZ();

    Serial.print("Roll : ");
    Serial.print(roll, 1);
    Serial.print("\tPitch : ");
    Serial.print(pitch, 1);
    Serial.print("\tYaw : ");
    Serial.println(yaw, 1);

    // Update IoT Cloud variables
    ArduinoCloud.update(); // This line ensures that the cloud variables are updated

    // Check if roll or pitch is greater than 5 degrees
    if (abs(roll) > 5 || abs(pitch) > 5) {
      digitalWrite(redPin, HIGH);
      digitalWrite(greenPin, LOW);
    } else {
      digitalWrite(redPin, LOW);
      digitalWrite(greenPin, HIGH);
    }

    timer = millis();
  }
}

/*
  Since Roll is READ_WRITE variable, onRollChange() is
  executed every time a new value is received from IoT Cloud.
*/
void onRollChange() {
  // Add your code here to act upon Roll change
}

/*
  Since Pitch is READ_WRITE variable, onPitchChange() is
  executed every time a new value is received from IoT Cloud.
*/
void onPitchChange() {
  // Add your code here to act upon Pitch change
}

/*
  Since K is READ_WRITE variable, onKChange() is
  executed every time a new value is received from IoT Cloud.
*/
void onKChange() {
  // Add your code here to act upon K change
}
